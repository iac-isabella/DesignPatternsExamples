{"name":"Design Patterns : Composite and Decorator","tagline":"Trabalho 0 da disciplina de Programação Orientada a Objetos 2. Feito por Isabella de Albuquerque e Renan Cosmo.","body":"## Padrão Composite\r\n\r\n### Contexto e Aplicações\r\nComposite é um padrão de projeto de software utilizado para representar um objeto que é constituído pela composição de objetos similares a ele. Neste padrão, o objeto composto possui um conjunto de outros objetos que estão na mesma hierarquia de classes a que ele pertence.\r\nÉ utilizado sempre que é necessário representar elementos que são compostos por outros elementos similares.\r\nPor exemplo, em interfaces gráficas um elemento gráfico pode ser constituído pela composição de vários outros elementos gráficos. Uma janela pode conter um ou mais ícones, uma caixa de texto e vários outros elementos gráficos - até mesmo outra janela.\r\n\r\n**Resumindo:**\r\n\r\n* _Objetivo:_ Prover uma estrutura de árvore para representação eficiente de relações todo-parte.  \r\n* _Problema típico:_ Suponha uma estrutura de objetos relacionados a outros na forma de relações todo parte. A questão é: como fazer com que todos os objetos, tanto os \"todos\" como as \"partes\", possam ser manipulados de maneira idêntica por classes clientes, através de uma interface única? \r\n* _Solução:_ O padrão Composite propõe uma classe abstrata comum para objetos \"todo\" e \"parte\", contendo operações comuns a eles. Os objetos \"todo\" contêm listas de objetos \"partes\". Classes clientes acessam a mesma interface (a definida pela classe abstrata) tanto para objetos \"todo\" como para objetos \"parte\". \r\n\r\n###Exemplo\r\nPara fins de demonstração do uso do padrão composite segue um exemplo, cujo cujo código será exibido em Java e em Scala. Este código se encontra disponível no GitHub no branch \"code\". Observe o diagrama de classes do exemplo:","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}