{"name":"Design Patterns : Composite and Decorator","tagline":"Trabalho 0 da disciplina de Programação Orientada a Objetos 2. Feito por Isabella de Albuquerque e Renan Cosmo.","body":"# Padrão Composite\r\n\r\n## Contexto e Aplicações\r\nComposite é um padrão de projeto de software utilizado para representar um objeto que é constituído pela composição de objetos similares a ele. Neste padrão, o objeto composto possui um conjunto de outros objetos que estão na mesma hierarquia de classes a que ele pertence.\r\nÉ utilizado sempre que é necessário representar elementos que são compostos por outros elementos similares.\r\nPor exemplo, em interfaces gráficas um elemento gráfico pode ser constituído pela composição de vários outros elementos gráficos. Uma janela pode conter um ou mais ícones, uma caixa de texto e vários outros elementos gráficos - até mesmo outra janela.\r\n**Resumindo:**\r\n* Objetivo: Prover uma estrutura de árvore para representação eficiente de relações todo-parte.  \r\n* Problema típico: Suponha uma estrutura de objetos relacionados a outros na forma de relações todo parte. A questão é: como fazer com que todos os objetos, tanto os “todos” como as “partes”, possam ser manipulados de maneira idêntica por classes clientes, através de uma interface única? \r\n* Solução: O padrão Composite propõe uma classe abstrata comum para objetos “todo” e “parte”, contendo operações comuns a eles. Os objetos “todo” contêm listas de objetos “partes”. Classes clientes acessam a mesma interface (a definida pela classe abstrata) tanto para objetos “todo” como para objetos “parte”. Na Figura 12 temos: Componente: declara a interface comum a objetos “todo” e “parte” através de operações comuns. As operações Adicionar(), Remover() e RetornarFilho() permitem manipular objetos filhos (respectivamente, adicionar um filho, remover um filho e retornar um filho) alocados em estruturas de árvore de forma a representar a relação todo-parte. Folha: representa objetos que não possuem filhos na estrutura de árvore, portanto, as operações de acesso aos mesmos declaradas em Componente não são implementadas. Ele implementa apenas operações que não envolvam \r\n* manipulação de filhos (representadas pelo método operacao()). Composite: classe que representa objetos “todo”, constituído por filhos que, como pode ser visto, são também pertencentes à classe Componente, podendo ser, portanto, do tipo Folha ou Composite. Cliente: manipula objetos na árvore através da interface comum provida por Componente.\r\n### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and we’ll help you sort it out.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}